import logging
import asyncio
from typing import Dict, Any, Optional
from config.config import Config
from data_managers.market_state import MarketState
from strategy.trade_module_trapx import TradeModuleTrapX
from strategy.trade_module_scalpel import TradeModuleScalpel

logger = logging.getLogger(__name__)

class StrategyRouter:
    def __init__(self, config: Config):
        self.config = config
        self.trapx_module = TradeModuleTrapX(config)
        self.scalpel_module = TradeModuleScalpel(config)
        logger.info("StrategyRouter initialized for 'OR' logic mode.")

    async def route_and_generate_signal(self, market_state: MarketState, pre_filter_report: Dict[str, Any]) -> Optional[Dict[str, Any]]:
        """
        Runs both TrapX and Scalpel modules and returns a signal if either one confirms a pattern.
        Gives priority to TrapX if both trigger simultaneously.
        """
        logger.debug("Running parallel protocol detectors (TrapX OR Scalpel).")
        
        trapx_signal_task = self.trapx_module.generate_signal(market_state)
        scalpel_signal_task = self.scalpel_module.generate_signal(market_state)
        
        trapx_signal, scalpel_signal = await asyncio.gather(trapx_signal_task, scalpel_signal_task)

        if trapx_signal:
            logger.info(f"Signal generated by PRIMARY module: TrapX ({trapx_signal.get('direction')})")
            return trapx_signal
        
        if scalpel_signal:
            logger.info(f"Signal generated by SECONDARY module: Scalpel ({scalpel_signal.get('direction')})")
            return scalpel_signal

        logger.debug("No signal generated by either TrapX or Scalpel.")
        return None
